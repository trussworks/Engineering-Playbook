"use strict";(self.webpackChunkengineering_playbook=self.webpackChunkengineering_playbook||[]).push([[1217],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(t),h=r,g=u["".concat(l,".").concat(h)]||u[h]||p[h]||o;return t?a.createElement(g,s(s({ref:n},d),{},{components:t})):a.createElement(g,s({ref:n},d))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1115:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));t(8209);const o={},s="Web Applications in Go",i={unversionedId:"web/server/go",id:"web/server/go",title:"Web Applications in Go",description:"This section is meant to contain some of the lessons",source:"@site/docs/web/server/go.md",sourceDirName:"web/server",slug:"/web/server/go",permalink:"/docs/web/server/go",draft:!1,editUrl:"https://github.com/trussworks/Engineering-Playbook/edit/main/docs/web/server/go.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Server",permalink:"/docs/web/server/"},next:{title:"Testing Frameworks",permalink:"/docs/web/testing/"}},l={},c=[{value:"Application Layers",id:"application-layers",level:2},{value:"Handlers",id:"handlers",level:3},{value:"Testing Handlers",id:"testing-handlers",level:4},{value:"Composing Handlers",id:"composing-handlers",level:4},{value:"Models",id:"models",level:3},{value:"Marshalling Models",id:"marshalling-models",level:4},{value:"Working with Models in Go",id:"working-with-models-in-go",level:4},{value:"Where/When to Write Query Code",id:"wherewhen-to-write-query-code",level:4},{value:"Testing Models",id:"testing-models",level:4},{value:"Model References",id:"model-references",level:4},{value:"Services",id:"services",level:3},{value:"Testing Services",id:"testing-services",level:4},{value:"Service Resources",id:"service-resources",level:4},{value:"General Patterns",id:"general-patterns",level:3},{value:"Resources",id:"resources",level:3}],d={toc:c};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"web-applications-in-go"},"Web Applications in Go"),(0,r.kt)("p",null,"This section is meant to contain some of the lessons\nTruss has had with building web applications in Go.\nIt borrows from the format of ",(0,r.kt)("a",{parentName:"p",href:"https://golang.org/doc/effective_go.html"},"Effective Go"),'\nalong with some lightweight "starter templates",\nto provide some basic standards and patterns we follow.\nCode samples are not meant to be "copy and paste" ready,\nbut provide fundamental principles\nthat can be incorporated into various applications, frameworks, and packages.'),(0,r.kt)("p",null,"We attempt to use plain Go code when possible,\nbut package code may be incorporated or pseudocoded\nto mimic production use cases."),(0,r.kt)("h2",{id:"application-layers"},"Application Layers"),(0,r.kt)("p",null,"Defining application layers is crucial\nto a maintainable API or web service.\nPicking responsibilities and contracts across layers\ncan define how an application grows\nand how long code iterations in a mature codebase will take.\nIn Go,\nthese layers will likely take the form of packages.\nThere is no one-size-fits-all approach to defining the contract of these packages,\nbut we'll attempt to define some common patterns and inform future approaches."),(0,r.kt)("h3",{id:"handlers"},"Handlers"),(0,r.kt)("p",null,'The term "handler" is used to describe the layer that accepts HTTP requests\nand returns a response.\nWhile it may vary in implementation between different libraries,\nthe term comes from the Go standard library ',(0,r.kt)("a",{parentName:"p",href:"https://golang.org/pkg/net/http/#Handler"},"HTTP Package"),"."),(0,r.kt)("p",null,"The responsibility of a handler is to accept an HTTP request,\ndelegate the work to complete the request,\nand respond based on error or success scenarios.\nBusiness logic, database code, etc. should not be in a handler."),(0,r.kt)("p",null,"It should look rather declarative\nwith error and success cases drawing two vertical lines via indentation.\nHere's a trimmed down example of a basic GET handler:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"package handlers\n\ntype getDogHandler struct {\n    // service implementation, we'll get back to this later\n    fetchDog FetchDog\n    //logger implementation may vary, we'll psuedocode for this example\n    logger Logger\n}\n\nfunc (h *getDogHandler) handleGetDog(w http.ResponseWriter, r *http.Request) {\n    // the only work here is getting params\n    // the marshalling likely would be delegated to a middleware in production\n    p := dogGetParams(r)\n\n    // offload querying to a service `fetchDog`\n    dog, err := h.fetchDog(p.DogID)\n\n    // the error parallel\n    if err != nil {\n        http.Error(w, \"Could not fetch dog!\", http.StatusInternalServerError)\n        return\n    }\n\n    // the success parallel\n    // marshalling here is also likely to be handled by some middleware\n    w.Write(dogPayload(dog))\n}\n")),(0,r.kt)("h4",{id:"testing-handlers"},"Testing Handlers"),(0,r.kt)("p",null,"Handlers will likely become the entry point for integration testing main workflows.\nThey can be spun up with full service layer implementations\nand tested for high priority requests flows (ex. success paths).\nBe careful to limit integration tests here,\nas they can quickly slow down the application.\nIf the integration tests become complex,\nit's a good indicator that the application logic for that handler\nis due for a refactor."),(0,r.kt)("p",null,"Unit testing handlers often involves mocking\n",(0,r.kt)("a",{parentName:"p",href:"#services"},"service layers"),'.\nFrom there,\nthey will answer the question of:\n"given a set of service layer responses,\nwhat response does the handler return?"\nThis verifies the response/request responsibilities of the handler,\nand can be used to test edge cases with little test performance impact.'),(0,r.kt)("h4",{id:"composing-handlers"},"Composing Handlers"),(0,r.kt)("p",null,"Handlers, and middlewares more generally, can greatly benefit from being written as ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/@matryer/the-http-handler-wrapper-technique-in-golang-updated-bc7fbcffa702"},'"adapters"'),". You can then compose very complex flows out of many smaller parts, which is really just another expression of the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Unix_philosophy"},"Unix philosophy"),"."),(0,r.kt)("p",null,"When building adapters, please ensure the signature of the returned type is ",(0,r.kt)("inlineCode",{parentName:"p"},"http.Handler"),", even if the underlying implementation is an ",(0,r.kt)("inlineCode",{parentName:"p"},"http.HandlerFunc"),"... All ",(0,r.kt)("inlineCode",{parentName:"p"},"http.HandlerFunc"),"s are ",(0,r.kt)("inlineCode",{parentName:"p"},"http.Handler"),"s, but not all ",(0,r.kt)("inlineCode",{parentName:"p"},"http.Handler"),"s are ",(0,r.kt)("inlineCode",{parentName:"p"},"http.HandlerFunc"),"s."),(0,r.kt)("h3",{id:"models"},"Models"),(0,r.kt)("p",null,"Put simply, models describe data.\nThey are agnostic to the data source\n(JSON over HTTP, in-memory data structures, DB tables, etc.),\nhowever in many cases the term will be used synonymously\nwith data queried from a DB."),(0,r.kt)("p",null,"The model code should provide the structure of the data\nalong with methods dictating how outside sources interact with it."),(0,r.kt)("p",null,"For example,\nhere's a pretty simple example of a model struct for a dog."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package models\n\ntype Dog struct {\n    ID      uuid.UUID `json:"id" db:"id"`\n    Name    string    `json:"name" db:"name"`\n    Owner     Owner\n}\n')),(0,r.kt)("p",null,"It has a a unique ID, name, and ",(0,r.kt)("inlineCode",{parentName:"p"},"Owner"),".\nThe latter being a ",(0,r.kt)("inlineCode",{parentName:"p"},"struct")," that encompasses an association."),(0,r.kt)("p",null,"The field tags follow the syntax patterns for the\n",(0,r.kt)("a",{parentName:"p",href:"https://golang.org/pkg/encoding/json/"},"json"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://godoc.org/github.com/jmoiron/sqlx"},"sqlx")," packages.\nThis is not to prescribe specific packages,\nbut to provide a more decorative example that may be encountered in a Truss codebase."),(0,r.kt)("p",null,"Interacting with this model is likely going to happen in two ways:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"marshalling from an outside data source"),(0,r.kt)("li",{parentName:"ol"},"modifying/viewing the data in Go\n(ex. executing business logic).")),(0,r.kt)("h4",{id:"marshalling-models"},"Marshalling Models"),(0,r.kt)("p",null,"In the most basic cases of accepting an HTTP request\nor writing/reading from a SQL DB,\nmarshalling is unlikely to happen manually.\nMany web app frameworks or DB connectors/ORMs\nare going to handle that hidden by their public APIs\nand provide convenience query methods\nor, in the case of JSON HTTP requests,\nparameter wrappers for handlers.\nWithin a handler or service,\nthe model is likely to be accessed only in its Go struct form.\nIf you're curious what that marshalling code might look like,\nyou can look at this ",(0,r.kt)("a",{parentName:"p",href:"https://blog.golang.org/json-and-go"},"json blog post"),"\nor take a look at some of the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jmoiron/sqlx/blob/master/sqlx.go#L23"},"sqlx column mapping code"),"\nthat works in tandem with the sql standard library.\nWe'll get more into the interaction between those packages\nand our application code in the next section about ",(0,r.kt)("a",{parentName:"p",href:"#services"},"services"),"."),(0,r.kt)("h4",{id:"working-with-models-in-go"},"Working with Models in Go"),(0,r.kt)("p",null,"In the second case,\nwe need to utilize our models to store results of our application logic.\nAfter all, model structs and databases don't deliver client value on their own.\nLet's take a look back at our dog model\nand perform some operations."),(0,r.kt)("p",null,"First, let's try to add a dog."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package models\n\ntype Dog struct {\n    ID      uuid.UUID `json:"id" db:"id"`\n    Name    string    `json:"name" db:"name"`\n    Owner     Owner\n}\n')),(0,r.kt)("p",null,"Elsewhere in the code,\nwe create a new dog and save it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"package services\n\nfunc MyDogFunc(name string, owner Owner) (Dog, error) {\n    dog := Dog{}\n    dog.Name = name\n    dog.Owner = Owner\n    // Save is an external method to interface with DB passed as dependency\n    db.Save(&dog)\n    return dog, nil\n}\n")),(0,r.kt)("p",null,"Notice how our data source is queried entirely outside of the model.\nThis allows us to separate the model structure\nand the dependencies such as external packages for DB connectors\nor the type of database itself.\nUsing this separation helps to isolate data source specific code,\nallowing mutability of underlying infrastructure\nand enforcing code reuse."),(0,r.kt)("p",null,"Let's say our Owner can leave the application,\nand in this case the owner's dogs should also be marked as inactive.\nWe want our Dog model code to maintain this constraint."),(0,r.kt)("p",null,"Here's a method to demonstrate that relationship:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"package models\n\ntype Dog struct {\n    // ...\n    Status Status\n}\n\ntype Owner struct {\n    Dogs []Dog\n    Status Status\n}\n\nfunc (o *Owner) Deactivate() {\n    o.Status = Inactive\n    dogs := o.Dogs[:0]\n    for _, dog := range o.Dogs {\n        dog.Status = Inactive\n        dogs = append(dogs, dog)\n    }\n    o.Dogs = dogs\n}\n")),(0,r.kt)("p",null,"The purpose here is to set up the public model API\nto only allow valid modifications throughout the codebase.\nWe've explicitly linked the dog and owner\nto enforce any data constraints.\nSimilar methodology may follow for reactivating the owner,\nchanging a dog's owner, etc.\nNote that in many cases when writing Go code,\nwe'd set parameters like these as unexported\nto avoid invalid state changes,\nhowever this isn't possible due to required exposure\nby DB/JSON packages that will use the model's public fields."),(0,r.kt)("p",null,"We've continued to separate any DB concerns\nto outside the model.\nFor example,\nit's likely we'd want to wrap these changes in a transaction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"package services\n\nfunc DeactiveOwner(owner Owner) error {\n    transaction := db.Transaction.Begin()\n    owner.Deactivate()\n    err := transaction.Save(owner)\n    if err !=nil {\n        transaction.Rollback()\n        return err\n    }\n    err = transaction.Save(owner.Dogs)\n    if err !=nil {\n        transaction.Rollback()\n        return err\n    }\n    err := transaction.Save(owner)\n    transaction.Commit()\n    return nil\n}\n")),(0,r.kt)("p",null,"Separating the database concerns from the model\nallows us to interact with them separate of the data structure concerns.\nSince models have to be passed via ",(0,r.kt)("inlineCode",{parentName:"p"},"struct")," to marshall their fields\nand are commonly used across codebase layers,\nadding too many methods and dependencies\ncan cause excessive package imports across the codebase.\nFor example,\nif we wanted to use a locking feature specific to Postgres\nor our database connector library,\nwe can make those changes independent of the model,\nallowing the model to be reused elsewhere\nwithout pulling in possibly irrelevant packages or patterns.\nIt also allows for isolating experiments and changes\nto a small portion of the codebase,\nrather than propagated them throughout all model usages."),(0,r.kt)("h4",{id:"wherewhen-to-write-query-code"},"Where/When to Write Query Code"),(0,r.kt)("p",null,"The above examples make use of an abstracted dependency for a DB connector.\nIn reality,\nany ORM or query interface is likely to be much more complex than ",(0,r.kt)("inlineCode",{parentName:"p"},"Fetch"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"Save"),".\nAs data requirements become more complex,\nit becomes much harder to maintain models as purely structural.\nIt's hard to make an exact recommendation for Go code structure\nas data requirements may vary considerably.\nBackends could vary from REST APIs,\nhighly normalized SQL tables,\nserialized document stores,\nsparsely column oriented data,\nand so on."),(0,r.kt)("p",null,"Some general considerations when organizing query code are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If query patterns vary greatly for individual models,\nconsider tying them closer to the business logic they mirror\n(such as a service layer)."),(0,r.kt)("li",{parentName:"ul"},"If individual query patterns satisfy multiple models,\nconsider a separate query layer that can abstract/share code.\nWhen designing something like this,\nbe wary of over-abstracting and reinventing a query language/ORM."),(0,r.kt)("li",{parentName:"ul"},"If models are single use (ie. they are queried and fetched in one way),\nadding query code to the model may make sense.\nNote though, models are often shared across multiple code layers,\nand due to struct field marshalling,\ncannot utilize interface abstractions.\nKeeping models as simple as possible (ie. without save/fetch methods),\nkeeps code changes from propagating across the codebase\nand becoming unmaintainable.")),(0,r.kt)("h4",{id:"testing-models"},"Testing Models"),(0,r.kt)("p",null,"Theoretically models should have little responsibility\nother than struct definition.\nAny exported methods should be unit tested,\nsuch as data validations\nor state change methods, like above."),(0,r.kt)("h4",{id:"model-references"},"Model References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://golang.org/pkg/database/sql/"},"SQL Standard Library"),"\nand some ",(0,r.kt)("a",{parentName:"li",href:"https://golang.org/src/database/sql/example_test.go"},"helpful examples")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jmoiron.github.io/sqlx/"},"Illustrated Guide to SQLX"))),(0,r.kt)("h3",{id:"services"},"Services"),(0,r.kt)("p",null,"So, we have handlers,\nwhich delegate a request/reponse flow\nand models that describe data.\nWhere does the application logic go?\nInto the service layer!\nThe service layer is where work gets delegated from a handler.\nThe pattern is borrowed from other languages\n",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/selleo/essential-rubyonrails-patterns-part-1-service-objects-1af9f9573ca1"},"like Ruby"),',\nwhere controllers and models\nget encumbered with multiple responsibilities.\nThe service layer becomes a space\nfor single use, reusable objects (service objects)\nto be built out.\nThis layer will often be referred to as "business logic"\nor "application logic",\nbut it\'s more or less\nwhat makes your application/API useful to a client.\nIt\'s also where the various package dependencies\nof the application\nare likely to meet,\nanswering the question of\n"how do I accomplish the client need with the given dependencies?"'),(0,r.kt)("p",null,"Let's take a look at an example!\nIn our dog application,\nit's unlikely all we want to do\nis create dogs in a database.\nLet's say the purpose of the application\nis to show the user how cute a dog is\ngiven various attributes."),(0,r.kt)("p",null,"Our handler may look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package handlers\n\ntype CalculateCutenessScore = func(dogID uuid.UUID) (int, error)\n\ntype getCutenessScoreHandler struct {\n    calculateCutenessScore CalculateCutenessScore\n    //logger implementation may vary, we\'ll psuedocode for this example\n    logger Logger\n}\n\nfunc (h *getCutenessScoreHandler) handleGetCutenessScore(w http.ResponseWriter, r *http.Request) {\n    // like above we\'ve deferred marshalling for this example\n    p := dogGetParams(r)\n\n    // offload calculation to service function\n    score, err := h.calculateCutenessScore(p.DogID)\n\n    if err == errors.CatchableError {\n        h.logger.Error(fmt.Sprintf("Could not calculate cuteness for dog %v", p.DogID), err)\n        w.Write(cutnessPayload(DEFAULT_CUTENESS_SCORE))\n    } else if err != nil {\n        http.Error(w, "Could not calculate dog\'s cuteness!", http.StatusInternalServerError)\n        return\n    }\n\n    w.Write(cutenessPayload(score))\n}\n')),(0,r.kt)("p",null,"The handler here is not too much different than our ",(0,r.kt)("inlineCode",{parentName:"p"},"GetDog")," example above.\nWe've changed from ",(0,r.kt)("inlineCode",{parentName:"p"},"GetDog")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"GetCutenessScore"),"\nand likewise updated the service definition.\nWe've also updated the error catching to be a little more robust.\nIn this case,\nwe've defined a \"catchable error\" to demonstrate\nwhen we should return a default case to the client\nand log an error.\nThen we default to 500 when unknown errors appear."),(0,r.kt)("p",null,"The service definition is passed into the handler as a dependency,\nbut unlike in the original handler definition,\nwe've also defined the service contract.\nThis is important to understanding services,\nso let's dive in a little deeper."),(0,r.kt)("p",null,"First let's look at a possible service definition for the cuteness score."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"package services\n\n// NewCalculateCutenessScore return an implementation for calculating dog cuteness\nfunc NewCalculateCutenessScore(db Database) func(dogID uuid.UUID) (int, error) {\n    return func(dogID uuid.UUID) (int, error) {\n        dog := models.Dog{}\n        err := db.Fetch(&dog, dogID)\n        if err != nil {\n            return 0, err\n        }\n        nameAsInt := strconv.Atoi(dog.Name)\n        // they're all good dogs brent\n        cutenessScore := nameAsInt%10 + BRONT_ADDER\n        return cutenessScore, nil\n    }\n}\n")),(0,r.kt)("p",null,"So, we've added a new implementation for cuteness score\nto the ",(0,r.kt)("inlineCode",{parentName:"p"},"services")," package.\nIt returns a function that can calculate cuteness for a given dog ID.\nThe dependencies, like the ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," connector,\nare passed into the function generator and hidden from the return value.\nThis return function, along with its dependencies,\nis created when the server is configured.\nThe constructor will be called once,\nwhereas the returned function will be called per request."),(0,r.kt)("p",null,"Notice how this definition is independent of the definition in the handler\n(in a different package).\nThe handler only needs to know what is required to return a score,\nit does ",(0,r.kt)("em",{parentName:"p"},"not")," need to know how.\nDeveloping the implementation independently\nallows us to easily swap out function implementations\nif the user, client, or dependency requirements ever change.\nFor example,\nwhat if the cuteness score changes to be out of 100 instead of 10?\nInstead of dealing with that in a handler,\nwhich we've defined as being responsible for request/response satisfaction,\nit's segmented to the service function/package.\nLikewise, if we want to use a new DB connector,\nthe dependency for the service will change,\nbut the handler will be agnostic to that difference.\nIf we reuse the calculator elsewhere,\nchanges will not have to be updated sparsely across the handlers codebase."),(0,r.kt)("p",null,"Be careful when defining pointers or values in the service functions.\nPointers in a closure can create concurrency concerns between handlers\nor any multi-threaded code within them.\nOn the flip side,\nusing values could create excessive memory usage\nif a service function is called repetitively."),(0,r.kt)("h4",{id:"testing-services"},"Testing Services"),(0,r.kt)("p",null,"The focus on testing services\nshould be unit testing business logic.\nThese tests will likely follow feature workflows.\nAn example from above would be:\ngiven a dog with X characters in its name,\nwhat is its dog score?\nThis layer is ripe for testing with\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/golang/go/wiki/TableDrivenTests"},"table driven tests"),"\n(ex. given this array of dog names,\nwhat are their scores)."),(0,r.kt)("p",null,"Avoid over-testing dependencies,\nand attempt to mock them when possible\n(such as DB calls),\nespecially expensive or unknown resources such as third party APIs.\nThese are likely to create long\nand flaky tests."),(0,r.kt)("h4",{id:"service-resources"},"Service Resources"),(0,r.kt)("p",null,"There  are three patterns worth understanding are:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://www.calhoun.io/using-the-service-object-pattern-in-go/"},"Service Objects in Go"),".\nThis demonstrates the origin of the pattern,\nwhere single function structs/interfaces\nare used to encapsulate work."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://blog.chewxy.com/2018/03/18/golang-interfaces/"},"How to Use Go Interface"),'.\nThis guide will provide a "Go" styling to interfaces.\nRather than use global objects (like in Ruby)\nor tightly coupled interfaces/classes (Java),\nwe\'ll keep interfaces close to usage (the handler in this case),\nand implementations will implicitly satisfy those contracts.'),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://www.calhoun.io/what-is-a-closure/"},"What is a Closure"),'.\nTaking the "one function interface" pattern a step further,\nwe can utilize Go\'s first class functions and closures\nto simply pass the function rather than struct,\nremoving a layer of indirection.')),(0,r.kt)("h3",{id:"general-patterns"},"General Patterns"),(0,r.kt)("p",null,"This section is for patterns that don't fit into the specific layers defined above\nor should be used throughout all of them."),(0,r.kt)("h3",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=rWBSMsLG8po&feature=youtu.be"},"GopherCon 2019: Mat Ryer - How I Write HTTP Web Services after Eight Years")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://peter.bourgon.org/go-best-practices-2016/#top-tip-10"},"Loggers are dependencies")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://blog.golang.org/context"},"Context as first argument"))))}p.isMDXComponent=!0},8209:(e,n,t)=>{t(7294)}}]);