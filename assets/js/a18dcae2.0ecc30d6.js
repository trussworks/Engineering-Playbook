"use strict";(self.webpackChunkengineering_playbook=self.webpackChunkengineering_playbook||[]).push([[5983],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,f=u["".concat(s,".").concat(h)]||u[h]||d[h]||i;return n?o.createElement(f,a(a({ref:t},c),{},{components:n})):o.createElement(f,a({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));n(8209);const i={},a="Standard Delivery Pipeline",l={unversionedId:"infrasec/delivery-pipeline",id:"infrasec/delivery-pipeline",title:"Standard Delivery Pipeline",description:"The following is a standardized workflow for developing and deploying our",source:"@site/docs/infrasec/delivery-pipeline.md",sourceDirName:"infrasec",slug:"/infrasec/delivery-pipeline",permalink:"/docs/infrasec/delivery-pipeline",draft:!1,editUrl:"https://github.com/trussworks/Engineering-Playbook/edit/main/docs/infrasec/delivery-pipeline.md",tags:[],version:"current",frontMatter:{},sidebar:"practices",previous:{title:"CI/CD according to Truss",permalink:"/docs/infrasec/ci_cd"},next:{title:"Good Infrastructure - A Philosophy",permalink:"/docs/infrasec/good-infra"}},s={},p=[{value:"Developing Your Code",id:"developing-your-code",level:2},{value:"Unit Testing",id:"unit-testing",level:2},{value:"Deploying Our Code",id:"deploying-our-code",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"standard-delivery-pipeline"},"Standard Delivery Pipeline"),(0,r.kt)("p",null,"The following is a standardized workflow for developing and deploying our\ncode using CI/CD. This is meant to be an example, not a prescriptive\nideal; if your project needs to use a different workflow, that's fine.\nYour goal should still be to provide a workflow that can support frequent\nupdates, good testing, and prompt deploys."),(0,r.kt)("h2",{id:"developing-your-code"},"Developing Your Code"),(0,r.kt)("p",null,"Here at Truss, we generally use Git for our code repository, and Github\nmore specifically. Our preferred method for making changes and integrating\nthem into the project is relatively simple:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Check out the repository for ",(0,r.kt)("inlineCode",{parentName:"li"},"my-project"),"."),(0,r.kt)("li",{parentName:"ol"},"Create a new branch ",(0,r.kt)("inlineCode",{parentName:"li"},"my-feature")," in the repository."),(0,r.kt)("li",{parentName:"ol"},"Make your changes to the code and commit them, then push your code to\nthe central repository."),(0,r.kt)("li",{parentName:"ol"},"Create a pull request, get approvals, and then merge your ",(0,r.kt)("inlineCode",{parentName:"li"},"my-feature"),"\nbranch into the default branch.")),(0,r.kt)("p",null,"The virtue of this workflow over more complicated methods like the one\nshown ",(0,r.kt)("a",{parentName:"p",href:"https://nvie.com/posts/a-successful-git-branching-model/"},"here")," is\nthat we are constantly merging to the default branch, so the drift of any specific\nbranch from the default branch is kept to a minimum. The idea of more frequent small\nchanges over less frequent large changes is a fundamental aspect of many\ndevelopment practices (such as Agile). The core of this belief is that\nthings which break the the application can quickly be noticed, isolated,\nand rolled back (or fixed), without requiring a lengthy period of\ndiagnosis, or requiring delicate operations to pull out problem code\nwithout sacrificing code which is benign."),(0,r.kt)("p",null,"This process is known as ",(0,r.kt)("em",{parentName:"p"},"continuous integration")," or CI (because code is\nconstantly being integrated into the mainline of the project). Its\nrelative simplicity belies the fact that it also requires a great deal\nof additional work to ensure that this process can occur without\ndisrupting the project's development."),(0,r.kt)("h2",{id:"unit-testing"},"Unit Testing"),(0,r.kt)("p",null,"Key to ensuring that our CI workflow is safe is making sure we are doing\nunit testing of our code ",(0,r.kt)("em",{parentName:"p"},"prior")," to merging in to the default branch. To do this,\nwe use CI to run a battery of tests against\nevery branch we create a PR from. We want to run a variety of tests that\ncover a variety of things like:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Code formatting and syntax"),(0,r.kt)("li",{parentName:"ul"},"Acceptance testing for configuration"),(0,r.kt)("li",{parentName:"ul"},"Functional code testing")),(0,r.kt)("p",null,"Our goal is to be as sure as possible ",(0,r.kt)("em",{parentName:"p"},"before")," anyone even looks at the\npull request that this code does what we want and won't break things."),(0,r.kt)("h2",{id:"deploying-our-code"},"Deploying Our Code"),(0,r.kt)("p",null,"Merging your code is just the first step to actually getting it in front\nof a real person to use it. The other component for this how your code\ngets from a Git repository into a live environment where someone can touch\nit. This workflow is orchestrated via CI, and looks something like this:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"New code is merged into the default branch."),(0,r.kt)("li",{parentName:"ol"},"CI detects that the default branch has been updated and deploys the code to\nour ",(0,r.kt)("inlineCode",{parentName:"li"},"development")," environment."),(0,r.kt)("li",{parentName:"ol"},"CI checks to make sure the deploy was successful. Is our\nenvironment running the right version of the code?"),(0,r.kt)("li",{parentName:"ol"},"CI performs post-deployment\ntesting. Does it pass some functional tests to ensure user workflows\nare functional (eg, can someone log in, pull up a user record, put\nthings in a shopping cart, etc)? Are logs filling up with error now\nthat the new version is deployed?"),(0,r.kt)("li",{parentName:"ol"},"If the tests pass, CI goes ahead and deploys to our ",(0,r.kt)("inlineCode",{parentName:"li"},"production"),"\nenvironment, then runs the same sort of tests it ran in development.\nIn some cases, there may be an additional manual approval step, or\nthis may be a deployment to a ",(0,r.kt)("inlineCode",{parentName:"li"},"staging"),' environment as an additional\nstep prior to "real" production.')),(0,r.kt)("p",null,"This means that we are constantly releasing new versions of our code to\nusers -- we may deploy a dozen times a day, all with a reasonable degree\nof confidence that everything will be fine, thanks to our automated\ntests. If something doesn't work, we can stop the process (or roll back,\nif the problem is detected post-deploy), and users will be protected from\nmalfunctioning code. This ",(0,r.kt)("em",{parentName:"p"},"requires")," that we write a battery of tests at\nevery stage of the release process, however."),(0,r.kt)("p",null,"This automated workflow that allows rapid release of merged code is called\n",(0,r.kt)("em",{parentName:"p"},"continuous delivery")," or CD."))}d.isMDXComponent=!0},8209:(e,t,n)=>{n(7294)}}]);