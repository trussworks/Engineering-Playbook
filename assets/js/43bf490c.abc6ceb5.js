"use strict";(self.webpackChunkengineering_playbook=self.webpackChunkengineering_playbook||[]).push([[8084],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||i;return n?r.createElement(h,a(a({ref:t},d),{},{components:n})):r.createElement(h,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9181:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={},a="HTTP Methods",s={unversionedId:"web/api/rest-api-design/HTTP-Methods",id:"web/api/rest-api-design/HTTP-Methods",title:"HTTP Methods",description:"When using HTTP methods like PUT or GET in your REST API, it's important to comply with their definitions under the HTTP/1.1 Standard.",source:"@site/docs/web/api/rest-api-design/HTTP-Methods.md",sourceDirName:"web/api/rest-api-design",slug:"/web/api/rest-api-design/HTTP-Methods",permalink:"/docs/web/api/rest-api-design/HTTP-Methods",draft:!1,editUrl:"https://github.com/trussworks/Engineering-Playbook/edit/main/docs/web/api/rest-api-design/HTTP-Methods.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Error Response Strategy",permalink:"/docs/web/api/rest-api-design/Error-Response-Strategy"},next:{title:"Style Guide",permalink:"/docs/web/api/rest-api-design/Style-Guide"}},l={},p=[{value:"GET",id:"get",level:2},{value:"POST",id:"post",level:2},{value:"PATCH",id:"patch",level:2},{value:"PUT",id:"put",level:2},{value:"DELETE",id:"delete",level:2}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"http-methods"},"HTTP Methods"),(0,o.kt)("p",null,"When using HTTP methods like PUT or GET in your REST API, it's important to comply with their definitions under the ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"},"HTTP/1.1 Standard"),"."),(0,o.kt)("p",null,"Complying with the standard means that the users of your API will be able to understand it more easily and use it correctly. In addition, if you hook up observability or load testing tools in the future, they are more likely to work out of the box if you have abided by the common expectations."),(0,o.kt)("p",null,"The most important ones will be covered here."),(0,o.kt)("h2",{id:"get"},"GET"),(0,o.kt)("p",null,"The GET method requests a specified resource. Requests using GET should only retrieve data."),(0,o.kt)("p",null,"Example: This request returns a list of moves from the server."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET /v1/moves HTTP/1.1\nHost: api.move.mil\n")),(0,o.kt)("h2",{id:"post"},"POST"),(0,o.kt)("p",null,"The POST method is used to send data to create/update a type of resource."),(0,o.kt)("p",null,"Example: This request creates a shipment by sending a body with the shipment data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'POST /v1/shipments/ HTTP/1.1\nHost: api.move.mil\nContent-Type: application/json\nBody:\n{\n    "shipmentType": "UHAUL",\n    "destinationAddress": {\n        "streetAddress1": "812 S 129th Street",\n        "city": "San Diego",\n        "state": "CA",\n        "postalCode": "92102"\n    },\n}\n')),(0,o.kt)("h2",{id:"patch"},"PATCH"),(0,o.kt)("p",null,"The PATCH method is used to partially update a resource."),(0,o.kt)("p",null,"Example: This request updates two fields on a shipment that exists on the server."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'PATCH /v1/shipments/01b9671e-b268 HTTP/1.1\nHost: api.move.mil\nContent-Type: application/json\nBody:\n{\n    "shipmentType": "UPS",\n    "deliveryDate": "2020-11-08"\n}\n')),(0,o.kt)("h2",{id:"put"},"PUT"),(0,o.kt)("p",null,"The PUT method is used to send data to create/update a specified resource but it is generally used to replace an existing resource, rather than create a new one."),(0,o.kt)("p",null,"Example: Update an address by replacing with a complete address resource."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'PUT /v1/mto-shipment/c548a243-9705/address/701a2bf8 HTTP/1.1\nHost: api.move.mil\nContent-Type: application/json\n\n{\n  "streetAddress1": "3373 NW Martin Luther King Jr Blvd",\n  "city": "Alameda",\n  "state": "CA",\n  "postalCode": "94501",\n  "country": "USA"\n}\n')),(0,o.kt)("p",null,"The PUT method is idempotent, which means calling the same PUT request multiple times ",(0,o.kt)("strong",{parentName:"p"},"must")," always produce the same result."),(0,o.kt)("p",null,"Calling PUT five times will repeatedly replace the same resource, with the same result. Calling POST five times will create 5 instances of the resource."),(0,o.kt)("p",null,"See this ",(0,o.kt)("a",{parentName:"p",href:"https://restfulapi.net/rest-put-vs-post/"},"article")," for more discussion."),(0,o.kt)("h2",{id:"delete"},"DELETE"),(0,o.kt)("p",null,"The DELETE method deletes the specified resource."))}u.isMDXComponent=!0}}]);