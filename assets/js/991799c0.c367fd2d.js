"use strict";(self.webpackChunkengineering_playbook=self.webpackChunkengineering_playbook||[]).push([[3629],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),b=r,m=u["".concat(s,".").concat(b)]||u[b]||d[b]||o;return n?i.createElement(m,a(a({ref:t},p),{},{components:n})):i.createElement(m,a({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4403:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const o={},a="CircleCi Honeycomb Integration",l={unversionedId:"infrasec/tutorials/circle-ci-honeycomb-integrations",id:"infrasec/tutorials/circle-ci-honeycomb-integrations",title:"CircleCi Honeycomb Integration",description:"Honeycomb provides CI integrations allowing better instrumentation of builds. One such integration is for CircleCi via an Orb. This document provides a guide for adding Honeycomb instrumentation to CircleCi builds.",source:"@site/docs/infrasec/tutorials/circle-ci-honeycomb-integrations.md",sourceDirName:"infrasec/tutorials",slug:"/infrasec/tutorials/circle-ci-honeycomb-integrations",permalink:"/docs/infrasec/tutorials/circle-ci-honeycomb-integrations",draft:!1,editUrl:"https://github.com/trussworks/Engineering-Playbook/edit/main/docs/infrasec/tutorials/circle-ci-honeycomb-integrations.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tutorials",permalink:"/docs/infrasec/tutorials/"},next:{title:"Fix CircleCI Integrations",permalink:"/docs/infrasec/tutorials/fix-circleci-integrations"}},s={},c=[{value:"Setup",id:"setup",level:2},{value:"CircleCi Repo Changes",id:"circleci-repo-changes",level:2},{value:"Adding Orb",id:"adding-orb",level:3},{value:"Add Dependent Jobs",id:"add-dependent-jobs",level:3},{value:"Update Existing Jobs",id:"update-existing-jobs",level:2},{value:"Verification",id:"verification",level:2}],p={toc:c};function d(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"circleci-honeycomb-integration"},"CircleCi Honeycomb Integration"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.honeycomb.io/"},"Honeycomb")," provides CI integrations allowing better instrumentation of builds. One such integration is for CircleCi via an ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/honeycombio/buildevents-orb"},"Orb"),". This document provides a guide for adding Honeycomb instrumentation to CircleCi builds."),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"A few items need to be setup before modifying the repo."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"CircleCI needs to have the following environment variables configured: ",(0,r.kt)("inlineCode",{parentName:"li"},"BUILDEVENT_APIKEY")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"BUILDEVENT_CIRCLE_API_TOKEN"),". These have been populated for the Trussworks CircleCi Organization using the ",(0,r.kt)("inlineCode",{parentName:"li"},"org-global")," context."),(0,r.kt)("li",{parentName:"ol"},"CircleCI also needs a per project environment variable ",(0,r.kt)("inlineCode",{parentName:"li"},"BUILDEVENT_DATASET")," to separate the Honeycomb datasets.")),(0,r.kt)("p",null,"More information on the environment variables used by the Honeycomb integration can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/honeycombio/buildevents#environment-variables"},"here"),"."),(0,r.kt)("h2",{id:"circleci-repo-changes"},"CircleCi Repo Changes"),(0,r.kt)("h3",{id:"adding-orb"},"Adding Orb"),(0,r.kt)("p",null,"Add the following to the circleci file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"orbs:\n  buildevents: honeycombio/buildevents@0.2.7\n")),(0,r.kt)("h3",{id:"add-dependent-jobs"},"Add Dependent Jobs"),(0,r.kt)("p",null,"The Orb requires two additional jobs."),(0,r.kt)("p",null,"Setup: This job downloads the build events binary and helps setting up the workspace to be instrumented. It should be the first job and all workflow jobs should depend on it."),(0,r.kt)("p",null,"Watch: This job is a parallel job that polls the CircleCi API using the ",(0,r.kt)("inlineCode",{parentName:"p"},"BUILDEVENT_CIRCLE_API_TOKEN"),'. It is the main trace span and "watches" the build until completion providing top span metrics.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"  # Do not forget to add the executor to the below jobs\n  setup:\n    steps:\n      - buildevents/start_trace\n  watch:\n    steps:\n      - buildevents/watch_build_and_finish\n")),(0,r.kt)("p",null,"Now we'll start to use the new jobs. Here we add in the ",(0,r.kt)("inlineCode",{parentName:"p"},"setup")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"watch")," jobs to happen before the main ",(0,r.kt)("inlineCode",{parentName:"p"},"terratest")," job. Each of these jobs uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"org-global")," context for access to the global environment variables."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"workflows:\n  validate:\n    jobs:\n    - setup:\n        context:\n        - org-global\n    -  watch:\n        context:\n        - org-global\n        requires:\n          - setup\n    - terratest:\n        requires:\n          - setup\n        context:\n        - org-global\n")),(0,r.kt)("h2",{id:"update-existing-jobs"},"Update Existing Jobs"),(0,r.kt)("p",null,"To add the correct trace information existing jobs will need to be updated with a span. This tells Honeycomb that a particular job will need to be traced."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"}," # Sample job before Honeycomb tracing\n terratest:\n    steps:\n    - checkout\n    - restore_cache:\n")),(0,r.kt)("p",null,"We can add the span using the Orb's ",(0,r.kt)("inlineCode",{parentName:"p"},"with_job_span"),". It contains a ",(0,r.kt)("inlineCode",{parentName:"p"},"step")," directive for all the build steps."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"terratest:\n    steps:\n      # Here we add the tracing along with redefine the steps for the job\n      - buildevents/with_job_span:\n          steps:\n          - checkout\n          - restore_cache:\n")),(0,r.kt)("p",null,"For more advanced tracing the ",(0,r.kt)("a",{parentName:"p",href:"https://circleci.com/developer/orbs/orb/honeycombio/buildevents#commands"},"Orb")," does provide additional directives for more detailed information such as running commands and pushing custom metrics such as assets sizes."),(0,r.kt)("h2",{id:"verification"},"Verification"),(0,r.kt)("p",null,"When working properly the CircleCI workflow should look like below."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"honeycomb-circleci-workflow",src:n(2393).Z,width:"1216",height:"220"})),(0,r.kt)("p",null,"In Honeycomb there is a trace id for each build that matches the build id in CircleCi. Viewing the trace for a particular build should display a trace as below."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Honeycomb Trace",src:n(3831).Z,width:"1354",height:"282"})))}d.isMDXComponent=!0},3831:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/honeycomb-circleci-trace-7417d906858f7205573b24c0e8a7acdd.png"},2393:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/honeycomb-circleci-workflow-ad9b07c1c094157958a6ad0222e4060a.png"}}]);