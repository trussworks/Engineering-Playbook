"use strict";(self.webpackChunkengineering_playbook=self.webpackChunkengineering_playbook||[]).push([[6132],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),h=u(n),m=i,p=h["".concat(s,".").concat(m)]||h[m]||d[m]||l;return n?o.createElement(p,r(r({ref:t},c),{},{components:n})):o.createElement(p,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=h;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,r[1]=a;for(var u=2;u<l;u++)r[u]=n[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7816:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var o=n(7462),i=(n(7294),n(3905));n(8209);const l={},r="Molecule Primer",a={unversionedId:"infrasec/ansible/molecule-primer",id:"infrasec/ansible/molecule-primer",title:"Molecule Primer",description:"Molecule is the officially supported testing framework for Ansible. For now, this is mostly just a collection of",source:"@site/docs/infrasec/ansible/molecule-primer.md",sourceDirName:"infrasec/ansible",slug:"/infrasec/ansible/molecule-primer",permalink:"/docs/infrasec/ansible/molecule-primer",draft:!1,editUrl:"https://github.com/trussworks/Engineering-Playbook/edit/main/docs/infrasec/ansible/molecule-primer.md",tags:[],version:"current",frontMatter:{},sidebar:"practices",previous:{title:"Ansible Primer",permalink:"/docs/infrasec/ansible/ansible-primer"},next:{title:"AWS",permalink:"/docs/infrasec/aws/"}},s={},u=[{value:"Molecule documentation and articles",id:"molecule-documentation-and-articles",level:2},{value:"Setup",id:"setup",level:2},{value:"Creating a role or scenario",id:"creating-a-role-or-scenario",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Testing in EC2",id:"testing-in-ec2",level:3},{value:"Running Molecule Tests",id:"running-molecule-tests",level:2},{value:"Writing Tests in Molecule",id:"writing-tests-in-molecule",level:2}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"molecule-primer"},"Molecule Primer"),(0,i.kt)("p",null,"Molecule is the officially supported testing framework for Ansible. For now, this is mostly just a collection of\nexperiences and resources you can use when adding testing to your own Ansible roles; take these with a grain of salt."),(0,i.kt)("h2",{id:"molecule-documentation-and-articles"},"Molecule documentation and articles"),(0,i.kt)("p",null,"These resources will likely come in handy when trying to get Molecule up and running for yourself:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Molecule Official Docs: ",(0,i.kt)("a",{parentName:"li",href:"https://molecule.readthedocs.io/en/latest/"},"https://molecule.readthedocs.io/en/latest/")),(0,i.kt)("li",{parentName:"ul"},"Testing Your Ansible Roles with Molecule (Jeff Geerling):\n",(0,i.kt)("a",{parentName:"li",href:"https://www.jeffgeerling.com/blog/2018/testing-your-ansible-roles-molecule"},"https://www.jeffgeerling.com/blog/2018/testing-your-ansible-roles-molecule")),(0,i.kt)("li",{parentName:"ul"},"Test-driven Infrastructure Development with Ansible and Molecule (Jonas Hecht):\n",(0,i.kt)("a",{parentName:"li",href:"https://blog.codecentric.de/en/2018/12/test-driven-infrastructure-ansible-molecule/"},"https://blog.codecentric.de/en/2018/12/test-driven-infrastructure-ansible-molecule/")),(0,i.kt)("li",{parentName:"ul"},"Continuous Cloud Infrastructure With Ansible, Molecule, and TravisCI on AWS (Jonas Hecht):\n",(0,i.kt)("a",{parentName:"li",href:"https://blog.codecentric.de/en/2019/01/ansible-molecule-travisci-aws/"},"https://blog.codecentric.de/en/2019/01/ansible-molecule-travisci-aws/"))),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("p",null,"You will want to use some sort of virtual environment for Molecule; hopefully you're already doing this with Ansible\nanyway. Using Python 3 as the Python binary is also highly recommended. In addition to what you need for ansible, you\nwill need these Python modules as well:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"molecule"),(0,i.kt)("li",{parentName:"ul"},"molecule","[","docker","]"," - For testing with docker containers (the default)"),(0,i.kt)("li",{parentName:"ul"},"molecule","[","ec2","]"," - For testing on ec2 instances"),(0,i.kt)("li",{parentName:"ul"},"docker-py"),(0,i.kt)("li",{parentName:"ul"},"boto")),(0,i.kt)("h2",{id:"creating-a-role-or-scenario"},"Creating a role or scenario"),(0,i.kt)("p",null,"If you\u2019re just about to start making an Ansible role, you can use Molecule to do it and it will automatically build out\nthe Ansible role directory structure in the Galaxy-expected format in addition to creating the files needed for Molecule\ntesting. You can do this with:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"molecule init role -r your-role-name"))),(0,i.kt)("p",null,"If you just want to add a Molecule scenario (a single test framework) to an already-existing role, go into the role\ndirectory and run this command:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"molecule init scenario -r your-role-name [ -s scenario-name ]"))),(0,i.kt)("p",null,"By default, these commands will both create a molecule/ directory, inside which you will find the scenarios for molecule\ntesting. The only one there by default is the default scenario, but you can add others (if you wanted one with docker,\nfor instance, and one with EC2). These commands both take a number of command line switches, but the most important one\nyou\u2019ll probably use is ",(0,i.kt)("inlineCode",{parentName:"p"},"--driver-name"),": This tells molecule which driver to use for the scenario it is creating; by\ndefault this is docker, but this is where you would put ec2 or vagrant or whatever else if you wanted to test it another\nway. See the Molecule docs here for more information:\n",(0,i.kt)("a",{parentName:"p",href:"https://molecule.readthedocs.io/en/latest/configuration.html#driver"},"https://molecule.readthedocs.io/en/latest/configuration.html#driver"),"."),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"The main configuration file for Molecule is ",(0,i.kt)("inlineCode",{parentName:"p"},"molecule.yml"),", which is in the scenario directory. This is where you can\nspecify the different components you want to use like driver, linter, verifier, etc. It\u2019s also where you\u2019ll set up the\n\u2018platform\u2019; for docker, the platform section describes things like what image to use, while for EC2, this is where you\nspecify the AMI, instance type, and subnet. The Molecule driver docs above have more details on what can be set here."),(0,i.kt)("p",null,"Of special note is that for systemd-based docker images, you will need to use a few extra configuration options; the\nbottom of the docker driver docs (",(0,i.kt)("a",{parentName:"p",href:"https://molecule.readthedocs.io/en/latest/configuration.html#docker"},"https://molecule.readthedocs.io/en/latest/configuration.html#docker"),") has more details.\nSince most modern Linux distributions use systemd, you\u2019ll probably need to use this."),(0,i.kt)("p",null,"If you have other Ansible roles your role is dependent on, be sure to specify this in the ",(0,i.kt)("inlineCode",{parentName:"p"},"meta/main.yml")," file in your\nAnsible role configuration, and add it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"requirements.yml")," file in the Molecule scenario directory. Here\u2019s an\nexample of that file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\n- src: https://github.com/trussworks/ansible-role-aws-cloudwatch-logs-agent\n")),(0,i.kt)("p",null,"Once you have everything configured, you can make sure that Molecule is plumbed right by running this command:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"molecule --debug check"))),(0,i.kt)("p",null,"If this works, you know that at least the Molecule parts are working right."),(0,i.kt)("h3",{id:"testing-in-ec2"},"Testing in EC2"),(0,i.kt)("p",null,"With EC2, there a couple of other steps you\u2019ll need to take. First, you\u2019ll have to define an EC2_REGION environment\nvariable like so (this is due to the error described here: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ansible/molecule/issues/1570"},"https://github.com/ansible/molecule/issues/1570"),"):"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"export EC2_REGION=\u201dus-west-2\u201d"))),(0,i.kt)("p",null,"Molecule also assumes that the user you\u2019ll be using the log in to your EC2 instance is \u201cubuntu\u201d by default. With Amazon\nLinux 2 and a number of other distros, this will actually be \u201cec2-user\u201d. This means you\u2019ll have to fix this. You can\nfind this in ",(0,i.kt)("inlineCode",{parentName:"p"},"molecule/scenario_name/create.yml"),"; look for the \u201cssh_user\u201d variable and change that to what it needs to\nbe for your AMI."),(0,i.kt)("p",null,"In addition, you\u2019ll also need to provide credentials. I used aws-vault, but I didn\u2019t want to preface ",(0,i.kt)("em",{parentName:"p"},"all")," Molecule\ncommands with aws-vault, so when I ran it, I just prefaced each of my Molecule commands with aws-vault like this\nexample:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"aws-vault exec my_aws_profile -- molecule check"))),(0,i.kt)("h2",{id:"running-molecule-tests"},"Running Molecule Tests"),(0,i.kt)("p",null,"You can run Molecule tests all at once or in stages; these are all done with the various subcommands. The ones I ended\nup using the most were:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"create"),": This creates the docker container, EC2 instance, or what have you, to allow for further testing."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"converge"),": This attempts to converge the playbook against the created test environment."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"verify"),": This runs the tests you\u2019ve written in, say, Test-infra (more on that a little later). Obviously, if you do\nthis without converging first, they will likely fail."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"destroy"),": This tears down the created test environment; it\u2019s especially important to do in EC2 so you don\u2019t leave\nyour instances lying around."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test"),": This runs the entire test sequence. This includes everything above plus things like linting and an idempotence\ncheck (if you run a converge after a converge, is there anything to do?). It will destroy the test environment as its\nlast step, so if you want to iterate on an environment, you probably don\u2019t want to use this right away.")),(0,i.kt)("p",null,"By default, you don\u2019t get a ton of output about the state of your tests -- just a binary yes/no on success for the most\npart. If you want more information, you can run with ",(0,i.kt)("inlineCode",{parentName:"p"},"--debug"),", which will give you plenty of output. When running\nMolecule in EC2 I also used ",(0,i.kt)("inlineCode",{parentName:"p"},"--debug")," to find where Molecule was putting the ssh-key it was generating for its test\ninstances so I could poke around in them when something wasn\u2019t working."),(0,i.kt)("h2",{id:"writing-tests-in-molecule"},"Writing Tests in Molecule"),(0,i.kt)("p",null,"By default, Molecule is not testing anything other than the accuracy of your Ansible code -- is it written right and\ndoes it run without generating errors. This doesn\u2019t tell you if it\u2019s actually doing what you want it to, though. For\nthat, you\u2019ll need to write additional tests. By default, these use Test-Infra\n(",(0,i.kt)("a",{parentName:"p",href:"https://testinfra.readthedocs.io/en/latest/"},"https://testinfra.readthedocs.io/en/latest/"),"); you\u2019ll put these in the ",(0,i.kt)("inlineCode",{parentName:"p"},"molecule/scenario_name/tests")," directory. You\nshould see a ",(0,i.kt)("inlineCode",{parentName:"p"},"test_default.py")," file there already; this test is an example that just makes sure the ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/hosts")," file\nand root user exist, which is a bare minimum for things to actually work."),(0,i.kt)("p",null,"Writing tests for your role is going to depend a lot on what your role is supposed to do. Test-Infra is configured just\nby writing Python functions and making assertions; you\u2019ll need to read their docs in order to know how to test what you\nwant to."),(0,i.kt)("p",null,"Molecule does support other verifiers such as Goss and Inspec; see the Molecule docs for more information if you\u2019d like\nto use these."))}d.isMDXComponent=!0},8209:(e,t,n)=>{n(7294)}}]);