"use strict";(self.webpackChunkengineering_playbook=self.webpackChunkengineering_playbook||[]).push([[3360],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6681:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));n(8209);const o={},i="Architectural Decision Records",s={unversionedId:"documentation/adr",id:"documentation/adr",title:"Architectural Decision Records",description:"Truss uses architectural decision records (ADRs) to",source:"@site/docs/documentation/adr.md",sourceDirName:"documentation",slug:"/documentation/adr",permalink:"/docs/documentation/adr",draft:!1,editUrl:"https://github.com/trussworks/Engineering-Playbook/edit/main/docs/documentation/adr.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Documentation",permalink:"/docs/documentation/"},next:{title:"External Resources",permalink:"/docs/documentation/external-resources"}},l={},c=[{value:"Bootstrapping",id:"bootstrapping",level:2},{value:"Writing a new ADR",id:"writing-a-new-adr",level:2},{value:"Changing an old ADR",id:"changing-an-old-adr",level:2},{value:"Tools",id:"tools",level:2},{value:"See also",id:"see-also",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"architectural-decision-records"},"Architectural Decision Records"),(0,a.kt)("p",null,"Truss uses ",(0,a.kt)("a",{parentName:"p",href:"https://adr.github.io/"},"architectural decision records"),' (ADRs) to\ndocument engineering decisions. These include choices about composition of the\ntech stack, using one module or library over others, infrastructure, features,\netc. "Architectural" should be interpreted broadly: any decision that could\nimpact a project at the architectural level is a candidate for an ADR.'),(0,a.kt)("p",null,"ADRs are useful for recording context with decisions that may become unclear over\ntime, or as engineers rotate on and off the project. Therefore, the best time\nto write an ADR is shortly after - or before! - making the decision it documents."),(0,a.kt)("p",null,"We also encourage writing ADRs when a decision is made ",(0,a.kt)("em",{parentName:"p"},"not")," to do something,\nas these decisions are often no less significant."),(0,a.kt)("h2",{id:"bootstrapping"},"Bootstrapping"),(0,a.kt)("p",null,"We typically use the markdown ADR format, or ",(0,a.kt)("a",{parentName:"p",href:"https://adr.github.io/madr/"},"mADR"),". When starting a new\nproject or repository, review the mADR documentation and commit the most recent\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/adr/madr/blob/master/template/template.md"},"template")," into source control under ",(0,a.kt)("inlineCode",{parentName:"p"},"/docs/adr/"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"mkdir --parents docs/adr\ncurl -L -Ss https://raw.githubusercontent.com/adr/madr/master/template/template.md > docs/adr/0000-template.md\n")),(0,a.kt)("h2",{id:"writing-a-new-adr"},"Writing a new ADR"),(0,a.kt)("p",null,"To begin a new ADR, check out a branch and copy the template. It is helpful to\nestablish an indexing scheme in advance. You can add new ADRs indexed by a\nsimple sequence of integers, e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"0001-my-new-adr.md"),". In busier projects, it\nmay be useful to use a Unix timestamp to avoid index collisions when more than\none ADR is being drafted simultaneously:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'cp docs/adr/0000-template.md docs/adr/"$(date %+s)"-my-adr-title.md\n')),(0,a.kt)("h2",{id:"changing-an-old-adr"},"Changing an old ADR"),(0,a.kt)("p",null,'In general, once an ADR is added in an "accepted" state, it should not be\nchanged. If the decision it documents is later reversed, publish a new ADR\nexplaining that decision, and change the status of the old ADR to "superseded"\nas outlined in the template.'),(0,a.kt)("h2",{id:"tools"},"Tools"),(0,a.kt)("p",null,"Some command line tools are available that you may find useful for managing (m)ADRs in your project:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://adr.github.io/adr-log/"},"adr-log"),": Generates an architectural decision log out of mADRs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/thomvaill/log4brains"},"log4brains"),": Log ADRs right from\nyour IDE and publish them automatically as a static website")),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/documentation/intro-to-docs"},"Intro to docs"))))}u.isMDXComponent=!0},8209:(e,t,n)=>{n(7294)}}]);