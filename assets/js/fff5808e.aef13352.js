"use strict";(self.webpackChunkengineering_playbook=self.webpackChunkengineering_playbook||[]).push([[2620],{3905:(e,n,t)=>{t.d(n,{Zo:()=>h,kt:()=>u});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},h=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),c=l(t),u=i,m=c["".concat(p,".").concat(u)]||c[u]||d[u]||r;return t?a.createElement(m,o(o({ref:n},h),{},{components:t})):a.createElement(m,o({ref:n},h))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=c;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9029:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=t(7462),i=(t(7294),t(3905));const r={},o="NIX HOWTO",s={unversionedId:"developing/nix/HOWTO",id:"developing/nix/HOWTO",title:"NIX HOWTO",description:"This HOWTO assumes you already have nix installed.",source:"@site/docs/developing/nix/HOWTO.md",sourceDirName:"developing/nix",slug:"/developing/nix/HOWTO",permalink:"/docs/developing/nix/HOWTO",draft:!1,editUrl:"https://github.com/trussworks/Engineering-Playbook/edit/main/docs/developing/nix/HOWTO.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"nix",permalink:"/docs/developing/nix/"},next:{title:"Open Source",permalink:"/docs/developing/open-source/"}},p={},l=[{value:"Nix Channels",id:"nix-channels",level:2},{value:"Troubleshooting Git-related errors",id:"troubleshooting-git-related-errors",level:3},{value:"Setting up a new project",id:"setting-up-a-new-project",level:2}],h={toc:l};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"nix-howto"},"NIX HOWTO"),(0,i.kt)("p",null,"This HOWTO assumes you already have nix installed."),(0,i.kt)("h2",{id:"nix-channels"},"Nix Channels"),(0,i.kt)("p",null,"We currently recommend using the ",(0,i.kt)("a",{parentName:"p",href:"https://hydra.nixos.org/job/nixpkgs/trunk/unstable"},"Nix Unstable channel"),"\nby default as it contains the latest tested updates on a rolling basis. This\nmeans that the branch for the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NixOS/nixpkgs"},"NixOS/nixpkgs repository")," that is\nused is the ",(0,i.kt)("inlineCode",{parentName:"p"},"nixpkg-unstable")," branch."),(0,i.kt)("h3",{id:"troubleshooting-git-related-errors"},"Troubleshooting Git-related errors"),(0,i.kt)("p",null,"In the step above, you may need to modify the ",(0,i.kt)("inlineCode",{parentName:"p"},'ref="{BRANCH_NAME}";')," line\nwith the ",(0,i.kt)("inlineCode",{parentName:"p"},"master")," branch for the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NixOS/nixpkgs"},"NixOS/nixpkgs repository")," if you\nencounter any Git-related errors."),(0,i.kt)("p",null,"Trussels using Nix for package management have run into issues related to\ncommits not being found on that specific ",(0,i.kt)("inlineCode",{parentName:"p"},"nixpkgs-unstable")," branch. The\n",(0,i.kt)("a",{parentName:"p",href:"https://ahobson.github.io/nix-package-search/#/"},"nix-package-search")," will report the ",(0,i.kt)("inlineCode",{parentName:"p"},"ref")," to be\n",(0,i.kt)("inlineCode",{parentName:"p"},"nixpkgs-unstable")," but the actual commit may not exist on that branch due to\nintegration errors within the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NixOS/nixpkgs"},"NixOS/nixpkgs repository")," that\neventually may correct itself."),(0,i.kt)("p",null,"To read up on Nix Channels, see ",(0,i.kt)("a",{parentName:"p",href:"https://nixos.wiki/wiki/Nix_channels"},"their documentation"),".\nWhile the branch ",(0,i.kt)("inlineCode",{parentName:"p"},"nixpkgs-unstable")," specifically lags behind ",(0,i.kt)("inlineCode",{parentName:"p"},"master")," to\nthoroughly test things, some of our Truss projects are required to be\nup-to-date. This means that we may need to update some ",(0,i.kt)("inlineCode",{parentName:"p"},'ref="";')," sections of\nthe Import statement to point to ",(0,i.kt)("inlineCode",{parentName:"p"},"master")," to upgrade or downgrade a single\npackage in order to maintain our obligations to keep our dependencies\nup-to-date."),(0,i.kt)("h2",{id:"setting-up-a-new-project"},"Setting up a new project"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"nix")," directory"),(0,i.kt)("p",{parentName:"li"},"mkdir -p ",(0,i.kt)("inlineCode",{parentName:"p"},"./nix"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"nix/update.sh")," with the content below and make the script\nexecutable"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'#!/usr/bin/env bash\n\nset -euo pipefail\n\nif [ -z "${NIX_PROFILE+x}" ]; then\n  echo "NIX_PROFILE not set, not installing globally"\n  echo "Try running \'direnv allow\'"\n  exit 1\nfi\n\n# Having NIX_SSL_CERT_FILE set means go won\'t use macOS keychain based certs\n# MOST projects can leave this alone, but if you unset it in `.envrc`\n# be sure to uncomment the following line\n# export NIX_SSL_CERT_FILE=$HOME/.nix-profile/etc/ssl/certs/ca-bundle.crt\n\nDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"\n# install packages\nnix-env -f "${DIR}" -i\n# Store a hash of this file to the hash of the nix profile\n# This way if the config changes, we can warn about it via direnv\n# See the nix config in .envrc\nconfig_hash=$(nix-hash "${DIR}")\nstore_hash=$(nix-store -q --hash "${NIX_PROFILE}")\necho "${config_hash}-${store_hash}" > "${DIR}/../.nix-hash"\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"nix/default.nix")," that looks like the below, but replace\n",(0,i.kt)("inlineCode",{parentName:"p"},"_YOUR_PROJECT_NAME_")," with the name of your project"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'let\n  pkgs = import <nixpkgs> {};\n  inherit (pkgs) buildEnv;\nin buildEnv {\n  name = "_YOUR_PROJECT_NAME_-packages";\n  paths = [\n  ];\n}\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create/add to your ",(0,i.kt)("inlineCode",{parentName:"p"},".envrc")," with the following, replacing ",(0,i.kt)("inlineCode",{parentName:"p"},"_YOUR_PROJECT_NAME_")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# if nix is installed, use it\nif [ ! -r .nix-disable  ] && has nix-env; then\n  # set NIX_PROFILE so nix-env operations don\'t need to manually\n  # specify the profile path\n  export NIX_PROFILE="/nix/var/nix/profiles/per-user/${LOGNAME}/_YOUR_PROJECT_NAME_"\n\n  # Having NIX_SSL_CERT_FILE set means go won\'t use macOS keychain\n  # based certs\n  # MOST projects can leave this set, but if you are using go and\n  # custom certificates, you might need to futz with this\n  # export NIX_SSL_CERT_FILE_ORIG=$NIX_SSL_CERT_FILE\n  # unset NIX_SSL_CERT_FILE\n\n  nix_dir="nix"\n  # add the nix files so that if they change, direnv needs to be reloaded\n  watch_file "${nix_dir}"/*.nix\n  config_hash=$(nix-hash "${nix_dir}")\n  store_hash=$(nix-store -q --hash "${NIX_PROFILE}")\n\n  # The .nix-hash file is created by nix/update.sh\n  if [ ! -r .nix-hash ] || ! grep -q "${config_hash}-${store_hash}" .nix-hash; then\n    log_status "WARNING: nix packages out of date. Run ${nix_dir}/update.sh"\n  fi\n\n  # add the NIX_PROFILE bin path so that everything we just installed\n  # is available on the path\n  PATH_add ${NIX_PROFILE}/bin\n\n  # If you use go, add this\n  #\n  # nix is immutable, so we need to specify a path for local changes, e.g.\n  # binaries can be installed local to this project\n  export GOPATH=$PWD/.gopath\n  PATH_add ./.gopath/bin\n\n  # If you use node, add this\n  #\n  PATH_add ./node_modules/.bin\n  export NPM_CONFIG_PREFIX=$PWD/.npmglobal\n  PATH_add ./.npmglobal/bin\n\nfi\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use ",(0,i.kt)("a",{parentName:"p",href:"https://ahobson.github.io/nix-package-search/#/"},"nix-package-search")," to find your package\nversions and add them to your ",(0,i.kt)("inlineCode",{parentName:"p"},"nix/default.nix")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"paths")," section. Your\nnew ",(0,i.kt)("inlineCode",{parentName:"p"},"default.nix")," might look something like (with NAME replaced with your\nproject)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'let\n  pkgs = import <nixpkgs> {};\n  inherit (pkgs) buildEnv;\nin buildEnv {\n  name = "_YOUR_PROJECT_NAME_-packages";\n  paths = [\n\n    (import (builtins.fetchGit {\n      # Descriptive name to make the store path easier to identify\n      name = "nodejs-14.17.0";\n      url = "https://github.com/NixOS/nixpkgs/";\n      ref = "refs/heads/nixpkgs-unstable";\n      rev = "b65a64086f8c136545955d447e1918b97dad02af";\n    }) {}).nodejs-14_x\n  ];\n}\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"direnv allow")," to set up the new environment variables")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"./nix/update.sh")," to install the packages. It might take a\nwhile the first time and there isn't a progress bar or anything to\nlet you know it's working")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"When the update script finishes, you are ready to go")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You can then update ",(0,i.kt)("inlineCode",{parentName:"p"},"nix/default.nix")," when you need to add/update\npackages and then ",(0,i.kt)("inlineCode",{parentName:"p"},"direnv")," will let you know your packages are out\nof date and you need to run ",(0,i.kt)("inlineCode",{parentName:"p"},"./nix/update.sh")))))}d.isMDXComponent=!0}}]);